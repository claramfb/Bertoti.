# ATIVIDADE 1
2 Paragráfos do livro 'engineer at google':

  We see three critical differences between programming and software engineering: time, scale, and the trade-offs at play. On a software engineering project, engineers need to   be more concerned with the passage of time and the eventual need for change. In a software engineering organization, we need to be more concerned about scale and efficiency,   both for the software we produce as well as for the organization that is producing it. Finally, as software engineers, we are asked to make more complex decisions with         higher-stakes outcomes, often based on imprecise estimates of time and growth.
  
  Within Google, we sometimes say, “Software engineering is programming integrated over time.” Programming is certainly a significant part of software engineering: after all,    programming is how you generate new software in the first place. If you accept this distinction, it also becomes clear that we might need to delineate between programming      tasks (development) and software engineering tasks (development, modification, maintenance). The addition of time adds an important new dimension to programming. Cubes 
  aren’t   squares, distance isn’t velocity. Software engineering isn’t programming.


# comentar: programação + tempo, escala e trad-offs

engenharia de software não é sinonimo de programação asssim como distância não é velocidade como citado no texto por tanto considera-se que por mais que a engenharia de software ande ao lado da programação elas são as mesmas coisas

Na programação o tempo é uma questão muito importante por mais que o foco seja a resolução de problemas imediatos contrapondo-se a engenharia de software onde se planeja a evoluão do software ao longo do tempo.

Na programação os projetos podem variar de tamanho diferente da engenharia que são projetos de larga escala

Os trade-offs são comuns em ambas as áreas, mas na engenharia de software, as decisões são mais complexas e envolvem fatores como desempenho, manutenibilidade, custo e tempo de lançamento no mercado. Por exemplo:

- Trade-off entre desempenho e custo: Optar por utilizar uma tecnologia mais rápida e eficiente pode aumentar os custos de desenvolvimento e manutenção do software.

- Trade-off entre tempo e qualidade: Priorizar o lançamento rápido de um produto pode resultar em sacrificar a qualidade do código, levando a custos mais altos de manutenção no futuro.

- Trade-off entre funcionalidade e simplicidade: Adicionar mais recursos ao software pode torná-lo mais complexo e difícil de manter, enquanto simplificar demais pode limitar sua utilidade para os usuários.
